package kalacool.swtleveleditor;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.LinkedList;

import kalacool.swtleveleditor.ui.ClassItem;
import kalacool.swtleveleditor.ui.MainBoard;
import kalacool.swtleveleditor.ui.MainOptionBoard;

public class FileIO {

	//	private static final long serialVersionUID = -1710791576038402759L;
	public static void output(LinkedList<ClassItem> classItemList){
		String levelName = "untitled";
		try {
			File file;
			if(MainOptionBoard.getInstance().getSaveFileName()!=null&&MainOptionBoard.getInstance().getSaveFileName().trim()!=""){
				file = new File("generated_level_file\\"+MainOptionBoard.getInstance().getSaveFileName()+".lua");
				levelName = MainOptionBoard.getInstance().getSaveFileName();
			}
			else
			{
				file = new File("generated_level_file\\untitled.lua");
			}
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
			String content = null;
			StringBuffer buf = new StringBuffer();

			Double gravityX = 0.0,gravityY = 20.0;


			// Kalacool title
			buf.append("    -- Generated by Kalacool Editor\n\n");
			// Inital
			
			String contentBeforeClassLoaded = readFile("before_class_loaded.txt", StandardCharsets.UTF_8);
			buf.append(contentBeforeClassLoaded);

			int i = 0;
			for(ClassItem classItem :classItemList){
				
				if(!classItem.layer.equals("Image")&&!classItem.layer.equals("Monster")){
					//the case normal class item
					buf.append(" level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"] = "+classItem.set+".new"+classItem.className+"({x="+(classItem.getLocation().x+classItem.getSize().x/2)*2+",y="+(classItem.getLocation().y+classItem.getSize().y/2)*2);
					if(classItem.attList!=null&&!classItem.attList.isEmpty()){
						for(AttItem attItem:classItem.attList){
							if(attItem.value!=null)
								buf.append(","+attItem.attribute+"="+attItem.value);
						}
					}
					buf.append("})\n");   
					buf.append(" level.layers[\""+classItem.layer+"\"]:insert(level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"].image)\n");
					if(classItem.angle!=0){
						buf.append(" level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"].image:rotate("+(int)classItem.angle+")\n");
					}
				}else if(classItem.layer.equals("Monster")){
					///kalacool.swtleveleditor/monster_setting.txt
					buf.append(classItem.set+".addMonster({ID="+classItem.className+",x="+(classItem.getLocation().x+classItem.getSize().x/2)*2+",y="+(classItem.getLocation().y+classItem.getSize().y/2)*2);
					if(classItem.attList!=null&&!classItem.attList.isEmpty()){
						for(AttItem attItem:classItem.attList){
							if(attItem.value!=null)
								buf.append(","+attItem.attribute+"="+attItem.value);
						}
					}
					buf.append("})\n"); 
				}
				else{
					//TODO complete the image block implementation
					buf.append(" level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"] = "+"display.newImage"+"(\""+classItem.set+"\","+(classItem.getLocation().x+classItem.getSize().x/2)*2+","+(classItem.getLocation().y+classItem.getSize().y/2)*2);
					if(classItem.attList!=null&&!classItem.attList.isEmpty()){
						for(AttItem attItem:classItem.attList){
							if(attItem.value!=null)
								buf.append(","+attItem.attribute+"="+attItem.value);
						}
					}
					buf.append(")\n"); 
					buf.append(" level.layers[\""+classItem.layer+"\"]:insert(level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"])\n");
					if(classItem.angle!=0){
						buf.append(" level.layers[\""+classItem.layer+"\"].objects[\"object"+i+"\"]:rotate("+(int)classItem.angle+")\n");
					}
				}
				
				
				i++;
			}
			String contentAfterClassLoaded = readFile("after_class_loaded.txt", StandardCharsets.UTF_8);
			buf.append(contentAfterClassLoaded);

			content =  buf.toString();
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();
			System.out.println("Done");
		}catch(IOException exc){

		}



	}
	public static void outputEditorFile(LinkedList<ClassItem> classItemList){
		try {
			File file;
			if(MainOptionBoard.getInstance().getSaveFileName()!=null&&MainOptionBoard.getInstance().getSaveFileName().trim()!=""){
				file = new File("save\\"+MainOptionBoard.getInstance().getSaveFileName()+".kce");
			}
			else
				file = new File("save\\untitled.kce");
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
			String content = null;
			StringBuffer buf = new StringBuffer();

			//			Collections.sort(classItemList, Collections.reverseOrder());

			for(ClassItem classItem :classItemList){
				buf.append("----Start ClassItem----\n");
				buf.append(classItem.className+"\n");
				buf.append(classItem.layer+"\n");    
				buf.append(classItem.set+"\n"); 
				buf.append(classItem.imagePath+"\n"); 
				buf.append(classItem.getLocation().x+"\n"); 
				buf.append(classItem.getLocation().y+"\n");  
				if(classItem.attList!=null&&!classItem.attList.isEmpty()){
					for(AttItem attItem:classItem.attList){
						String value = attItem.value;
						if(value==null)
							value="";
						buf.append(attItem.attribute+"="+attItem.value+"\n");
					}
				}
				if(classItem.angle!=0)
					buf.append("angle="+(int)classItem.angle+"\n");
				buf.append("----End   ClassItem----\n");
			}
			content =  buf.toString();
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();
			System.out.println("Done");

		}catch(IOException exc){

		}
	}
	
	
	static String readFile(String path, Charset encoding) 
			throws IOException 
			{
		
		byte[] encoded = Files.readAllBytes(Paths.get(path));
		return new String(encoded, encoding);
			}

	@SuppressWarnings("deprecation")
	public static void readKCEFile(String fileName){
		/*   start  test     */
		ClassItem.deleteItemsOnScreen();
		File file = new File(fileName);
		FileInputStream fis = null;
		BufferedInputStream bis = null;
		DataInputStream dis = null;
		try {
			fis = new FileInputStream(file);

			// Here BufferedInputStream is added for fast reading.
			bis = new BufferedInputStream(fis);
			dis = new DataInputStream(bis);

			/*   "----Start ClassItem----"     */
			/*   "----End   ClassItem----"     */
			/*
			 * buf.append("----Start ClassItem----\n");
				buf.append(classItem.className+"\n");
				buf.append(classItem.layer+"\n");    
				buf.append(classItem.set+"\n"); 
				buf.append(classItem.imagePath+"\n"); 
				buf.append(classItem.getLocation().x+"\n"); 
				buf.append(classItem.getLocation().y+"\n");  
				buf.append("----End   ClassItem----\n");*/
			// dis.available() returns 0 if the file does not have more lines.

			while (dis.available() != 0) {
				while(dis.readLine()=="----Start ClassItem----"&&dis.available()!=0);	
				String className = dis.readLine();
				String layer = dis.readLine();
				String set = dis.readLine();
				String imagePath = dis.readLine();
				int x = Integer.valueOf(dis.readLine());
				int y = Integer.valueOf(dis.readLine());
				float angle = 0;
				//				while(dis.readLine()=="----End   ClassItem----"&&dis.available()!=0);
				String newLine = dis.readLine();
				LinkedList<AttItem> list = new LinkedList<AttItem>();
				while(newLine!=null&&!newLine.equals("----End   ClassItem----")&&dis.available()!=0){
					String att = newLine.substring(0,newLine.indexOf("="));
					String value = newLine.substring(newLine.indexOf("=")+1,newLine.length());
					if(!att.equals("angle")){
						if(value.equals("null")||value.trim().equals(""))
							value = null;
						list.add(new AttItem(att,value));
						
					}else{
						angle = Float.valueOf(value);
						System.out.println(angle);
					}
					newLine = dis.readLine();
				}



				//				while(dis.readLine()=="----End   ClassItem----"&&dis.available()!=0);
				MainBoard.getInstance().lastX = x;
				MainBoard.getInstance().lastY = y;
				MainBoard.getInstance().addNewClassSetItem(className, set, layer, imagePath,list,angle);
			}
			//			for(ClassItem item:MainBoard.classItemList){
			//				item.redrawCanvas();
			//				System.out.println(item.className+" redraw");
			//			}
			//			MainBoard.resolvedOverlapped();
			// dispose all the resources after using them.
			fis.close();
			bis.close();
			dis.close();
		}catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		/*   end  test     */
	}

}